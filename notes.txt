2024.05.07
才发现之前考虑的某些问题，并不一定是有意义的，比如考虑队列的出队效率不是最优，需用链表作为底层数据结构。
又或者是树结构查找元素，深度遍历还是广度遍历，只是单方面这样约定，没多少实际意义。

所以呀，你当下那么在乎的点，可能压根就不是根本点，只是自己多想而已。

1、虽然这样的数据结构不是很难，但不要只是每次到了面试才想起来，平时工作中多多用起来这些新的玩意；
2、工作中，可能很多问题都会选择用最熟悉的方式去解决，有时候也可以想想用另一种数据结构去替代试试看；

2024.09.05
不认可上面最开始的说法
如果队列底层是用数组实现的话，出队效率的确不高，用链表会高一点，可链表在入队时需要查找一遍元素直至尾节点，效率会低一些
（或许不用，链表一般都会记录头节点与尾节点，以供快速操作）
综上：队列的底层若是数组，入队效率高，出队效率低；若是链表，出队效率高（头节点的下一个节点赋给头节点），入队效率也高（在记录了尾节点的情况下）

树的遍历，若是用递归，那就是深度遍历

数据结构的理解：
1、数据结构，它就是封装好的一种工具，用于你能高效操作数据，为业务以辅助；
2、普通的数据结构，包括：类的封装、队列、栈、链表、二叉树、图，其中树与图需要深刻理解，并且加以业务的结合；
3、对树结构的深度遍历后的终止，的确很妙；
4、无论是链表拆开节点，重新连接，还是树的遍历，都涉及到数据的引用关联，引用知识很重要；

2024.09.09
二叉查找树删除节点，如果该节点下有两个子节点：
    1、不是连带该节点下面所有节点一起删除（和普通砍树不一样），而是要重新排列；
    2、重新排列时，选择删除节点左子树的最大值，或者右子树的最小值，替换被删除元素；
    3、为什么不是随便选择一个替代被删除元素？2中选择能最大程度保留树的原结构完整性，包括有序性和树的深度；